# Generated by Django 5.2.1 on 2025-07-13 14:24

from django.db import migrations
from django.contrib.auth import get_user_model

def populate_service_and_unit_types(apps, schema_editor):
    ServiceTypeMaster = apps.get_model('operations', 'ServiceTypeMaster')
    UnitTypeMaster = apps.get_model('operations', 'UnitTypeMaster')
    User = apps.get_model('authentication', 'User')
    
    # Get a superuser to set as created_by (use first superuser found)
    admin_user = User.objects.filter(is_superuser=True).first()
    if not admin_user:
        # If no superuser exists, use the first user found or create one
        admin_user = User.objects.first()
        if not admin_user:
            # Create a temporary admin user for this migration
            admin_user = User.objects.create_user(
                username='admin_migration',
                email='admin@example.com',
                password='temppassword123',
                role='admin',
                is_superuser=True,
                is_staff=True
            )
    
    # Service types data
    service_types = [
        {'name': 'Stevedoring', 'code': 'stevedoring'},
        {'name': 'Storage', 'code': 'storage'},
        {'name': 'Transport', 'code': 'transport'},
        {'name': 'Handling', 'code': 'handling'},
        {'name': 'Documentation', 'code': 'documentation'},
        {'name': 'Others', 'code': 'others'},
    ]
    
    # Unit types data
    unit_types = [
        {'name': 'MT', 'code': 'mt'},
        {'name': 'CBM', 'code': 'cbm'},
        {'name': 'Per Unit', 'code': 'per_unit'},
        {'name': 'Lumpsum', 'code': 'lumpsum'},
        {'name': 'Daily', 'code': 'daily'},
        {'name': 'Monthly', 'code': 'monthly'},
    ]
    
    # Create service types
    for service_type_data in service_types:
        ServiceTypeMaster.objects.get_or_create(
            code=service_type_data['code'],
            defaults={
                'name': service_type_data['name'],
                'is_active': True,
                'created_by': admin_user,
            }
        )
    
    # Create unit types
    for unit_type_data in unit_types:
        UnitTypeMaster.objects.get_or_create(
            code=unit_type_data['code'],
            defaults={
                'name': unit_type_data['name'],
                'is_active': True,
                'created_by': admin_user,
            }
        )

def reverse_populate_service_and_unit_types(apps, schema_editor):
    ServiceTypeMaster = apps.get_model('operations', 'ServiceTypeMaster')
    UnitTypeMaster = apps.get_model('operations', 'UnitTypeMaster')
    
    # Delete all service and unit types
    ServiceTypeMaster.objects.all().delete()
    UnitTypeMaster.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('operations', '0014_create_service_and_unit_type_masters'),
    ]

    operations = [
        migrations.RunPython(
            populate_service_and_unit_types,
            reverse_populate_service_and_unit_types
        ),
    ]
