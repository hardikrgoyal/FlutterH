# Generated by Django 5.2.1 on 2025-07-13 14:27

from django.db import migrations

def populate_temporary_fields(apps, schema_editor):
    RevenueStream = apps.get_model('operations', 'RevenueStream')
    ServiceTypeMaster = apps.get_model('operations', 'ServiceTypeMaster')
    UnitTypeMaster = apps.get_model('operations', 'UnitTypeMaster')
    
    # Mapping of old string values to new codes
    service_type_mapping = {
        'stevedoring': 'stevedoring',
        'storage': 'storage',
        'transport': 'transport',
        'handling': 'handling',
        'documentation': 'documentation',
        'others': 'others',
    }
    
    unit_type_mapping = {
        'mt': 'mt',
        'cbm': 'cbm',
        'per_unit': 'per_unit',
        'lumpsum': 'lumpsum',
        'daily': 'daily',
        'monthly': 'monthly',
    }
    
    # Update all existing revenue streams
    for revenue_stream in RevenueStream.objects.all():
        # Find matching service type
        service_type_code = service_type_mapping.get(revenue_stream.service_type)
        if service_type_code:
            try:
                service_type = ServiceTypeMaster.objects.get(code=service_type_code)
                revenue_stream.service_type_temp = service_type
            except ServiceTypeMaster.DoesNotExist:
                print(f"Warning: Service type '{service_type_code}' not found for revenue stream {revenue_stream.id}")
        
        # Find matching unit type
        unit_type_code = unit_type_mapping.get(revenue_stream.unit_type)
        if unit_type_code:
            try:
                unit_type = UnitTypeMaster.objects.get(code=unit_type_code)
                revenue_stream.unit_type_temp = unit_type
            except UnitTypeMaster.DoesNotExist:
                print(f"Warning: Unit type '{unit_type_code}' not found for revenue stream {revenue_stream.id}")
        
        revenue_stream.save()

def reverse_populate_temporary_fields(apps, schema_editor):
    RevenueStream = apps.get_model('operations', 'RevenueStream')
    
    # Clear the temporary fields
    RevenueStream.objects.update(service_type_temp=None, unit_type_temp=None)


class Migration(migrations.Migration):

    dependencies = [
        ('operations', '0016_add_temporary_revenue_stream_fields'),
    ]

    operations = [
        migrations.RunPython(
            populate_temporary_fields,
            reverse_populate_temporary_fields
        ),
    ]
