# Generated by Django 5.2.1 on 2025-09-28 09:27

from django.db import migrations

def add_additional_list_data(apps, schema_editor):
    ListTypeMaster = apps.get_model('operations', 'ListTypeMaster')
    ListItemMaster = apps.get_model('operations', 'ListItemMaster')
    User = apps.get_model('authentication', 'User')
    
    # Get an admin user
    admin_user = User.objects.filter(is_superuser=True).first()
    if not admin_user:
        admin_user = User.objects.filter(is_staff=True).first()
    if not admin_user:
        admin_user = User.objects.filter().first()
    
    if not admin_user:
        return  # Skip if no users exist
    
    # Define additional list types and their items
    additional_list_data = {
        'maintenance_categories': {
            'name': 'Maintenance Categories',
            'description': 'Categories for work orders and purchase orders',
            'items': [
                {'name': 'Engine', 'code': 'engine', 'sort_order': 1},
                {'name': 'Hydraulic', 'code': 'hydraulic', 'sort_order': 2},
                {'name': 'Bushing', 'code': 'bushing', 'sort_order': 3},
                {'name': 'Electrical', 'code': 'electrical', 'sort_order': 4},
                {'name': 'Other', 'code': 'other', 'sort_order': 5},
            ]
        },
        'vehicle_types_list': {
            'name': 'Vehicle Types List',
            'description': 'List of vehicle types for expenses (separate from equipment)',
            'items': [
                {'name': 'Pickup', 'code': 'pickup', 'sort_order': 1},
                {'name': 'Truck/Trailer', 'code': 'truck_trailer', 'sort_order': 2},
                {'name': 'Car', 'code': 'car', 'sort_order': 3},
                {'name': 'Motorcycle', 'code': 'motorcycle', 'sort_order': 4},
                {'name': 'Van', 'code': 'van', 'sort_order': 5},
            ]
        },
        'document_types': {
            'name': 'Document Types',
            'description': 'Types of vehicle documents',
            'items': [
                {'name': 'Insurance', 'code': 'insurance', 'sort_order': 1},
                {'name': 'Road Tax', 'code': 'road_tax', 'sort_order': 2},
                {'name': 'Registration', 'code': 'registration', 'sort_order': 3},
                {'name': 'Permit', 'code': 'permit', 'sort_order': 4},
                {'name': 'Pollution Certificate', 'code': 'pollution_certificate', 'sort_order': 5},
                {'name': 'Fastag', 'code': 'fastag', 'sort_order': 6},
                {'name': 'Other', 'code': 'other', 'sort_order': 7},
            ]
        },
        'priority_levels': {
            'name': 'Priority Levels',
            'description': 'Priority levels for work orders and tasks',
            'items': [
                {'name': 'Low', 'code': 'low', 'sort_order': 1},
                {'name': 'Medium', 'code': 'medium', 'sort_order': 2},
                {'name': 'High', 'code': 'high', 'sort_order': 3},
                {'name': 'Critical', 'code': 'critical', 'sort_order': 4},
                {'name': 'Emergency', 'code': 'emergency', 'sort_order': 5},
            ]
        },
        'status_options': {
            'name': 'Status Options',
            'description': 'Common status options for various entities',
            'items': [
                {'name': 'Draft', 'code': 'draft', 'sort_order': 1},
                {'name': 'Pending', 'code': 'pending', 'sort_order': 2},
                {'name': 'In Progress', 'code': 'in_progress', 'sort_order': 3},
                {'name': 'Completed', 'code': 'completed', 'sort_order': 4},
                {'name': 'Cancelled', 'code': 'cancelled', 'sort_order': 5},
                {'name': 'On Hold', 'code': 'on_hold', 'sort_order': 6},
            ]
        }
    }
    
    # Create list types and items
    for list_code, list_info in additional_list_data.items():
        # Create or get list type
        list_type, created = ListTypeMaster.objects.get_or_create(
            code=list_code,
            defaults={
                'name': list_info['name'],
                'description': list_info['description']
            }
        )
        
        # Create list items
        for item_data in list_info['items']:
            ListItemMaster.objects.get_or_create(
                list_type=list_type,
                name=item_data['name'],
                defaults={
                    'code': item_data['code'],
                    'sort_order': item_data['sort_order'],
                    'created_by': admin_user
                }
            )

def reverse_additional_list_data(apps, schema_editor):
    ListTypeMaster = apps.get_model('operations', 'ListTypeMaster')
    
    # Delete the additional list types
    additional_codes = [
        'maintenance_categories', 'vehicle_types_list', 'document_types', 
        'priority_levels', 'status_options'
    ]
    
    ListTypeMaster.objects.filter(code__in=additional_codes).delete()

class Migration(migrations.Migration):
    dependencies = [
        ('operations', '0033_populate_initial_list_data'),
    ]

    operations = [
        migrations.RunPython(add_additional_list_data, reverse_additional_list_data),
    ]
