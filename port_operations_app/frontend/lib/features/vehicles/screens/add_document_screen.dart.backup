import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../core/constants/app_colors.dart';
import '../../../shared/models/vehicle_model.dart';
import '../vehicle_providers.dart';

class AddDocumentScreen extends ConsumerStatefulWidget {
  final Vehicle vehicle;
  final VehicleDocument? editDocument;
  final VehicleDocument? renewDocument;
  
  const AddDocumentScreen({
    super.key, 
    required this.vehicle,
    this.editDocument,
    this.renewDocument,
  });

  @override
  ConsumerState<AddDocumentScreen> createState() => _AddDocumentScreenState();
}

class _AddDocumentScreenState extends ConsumerState<AddDocumentScreen> {
  final _formKey = GlobalKey<FormState>();
  final _documentNumberController = TextEditingController();
  final _issueDateController = TextEditingController();
  final _expiryDateController = TextEditingController();
  final _notesController = TextEditingController();

  DocumentType? _selectedDocumentType;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _initializeForm();
  }

  void _initializeForm() {
    if (widget.editDocument != null) {
      final doc = widget.editDocument!;
      _documentNumberController.text = doc.documentNumber;
      _issueDateController.text = doc.issueDate ?? '';
      _expiryDateController.text = doc.expiryDate;
      _notesController.text = doc.notes ?? '';
    } else if (widget.renewDocument != null) {
      final doc = widget.renewDocument!;
      _issueDateController.text = DateTime.now().toIso8601String().split('T')[0];
      _notesController.text = 'Renewed from ${doc.documentNumber}';
    }
  }

  void _initializeDocumentType(List<DocumentType> types) {
    if (widget.editDocument != null) {
      _selectedDocumentType = types.firstWhere(
        (type) => type.value == widget.editDocument!.documentType,
        orElse: () => types.first,
      );
    } else if (widget.renewDocument != null) {
      _selectedDocumentType = types.firstWhere(
        (type) => type.value == widget.renewDocument!.documentType,
        orElse: () => types.first,
      );
    }
  }

  @override
  void dispose() {
    _documentNumberController.dispose();
    _issueDateController.dispose();
    _expiryDateController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final isEdit = widget.editDocument != null;
    final isRenewal = widget.renewDocument != null;
    
    String title;
    if (isEdit) {
      title = 'Edit Document';
    } else if (isRenewal) {
      title = 'Renew Document';
    } else {
      title = 'Add Document';
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(title),
        backgroundColor: AppColors.primary,
        foregroundColor: AppColors.white,
      ),
      body: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildVehicleInfo(),
              const SizedBox(height: 24),
              _buildDocumentTypeField(isEdit || isRenewal),
              const SizedBox(height: 16),
              _buildDocumentNumberField(),
              const SizedBox(height: 16),
              _buildIssueDateField(),
              const SizedBox(height: 16),
              _buildExpiryDateField(),
              const SizedBox(height: 16),
              _buildNotesField(),
              const SizedBox(height: 32),
              _buildSubmitButton(isEdit, isRenewal),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildVehicleInfo() {
    return Card(
      color: AppColors.grey100,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          children: [
            const Icon(Icons.directions_car, color: AppColors.primary),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    widget.vehicle.vehicleNumber,
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  Text(
                    widget.vehicle.vehicleTypeName,
                    style: const TextStyle(
                      color: AppColors.textSecondary,
                      fontSize: 14,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDocumentTypeField(bool isReadOnly) {
    final documentTypesAsync = ref.watch(documentTypesProvider);
    
    return documentTypesAsync.when(
      data: (documentTypes) {
        // Initialize selected document type if not already set
        if (_selectedDocumentType == null && documentTypes.isNotEmpty) {
          WidgetsBinding.instance.addPostFrameCallback((_) {
            _initializeDocumentType(documentTypes);
          });
        }
        
        return DropdownButtonFormField<DocumentType>(
          decoration: InputDecoration(
            labelText: 'Document Type *',
            border: const OutlineInputBorder(),
            enabled: !isReadOnly,
          ),
          value: _selectedDocumentType,
          items: documentTypes.map((type) {
            return DropdownMenuItem(
              value: type,
              child: Text(type.label),
            );
          }).toList(),
          onChanged: isReadOnly ? null : (value) {
            setState(() {
              _selectedDocumentType = value;
            });
          },
          validator: (value) {
            if (value == null) {
              return 'Document type is required';
            }
            return null;
          },
        );
      },
      loading: () => const LinearProgressIndicator(),
      error: (error, stack) => Column(
        children: [
          const Icon(Icons.error, color: Colors.red),
          Text('Failed to load document types: $error'),
          ElevatedButton(
            onPressed: () => ref.refresh(documentTypesProvider),
            child: const Text('Retry'),
          ),
        ],
      ),
    );
  }

  Widget _buildDocumentNumberField() {
    return TextFormField(
      controller: _documentNumberController,
      decoration: const InputDecoration(
        labelText: 'Document Number *',
        border: OutlineInputBorder(),
        hintText: 'Policy No., RC No., Certificate No., etc.',
      ),
      validator: (value) {
        if (value == null || value.trim().isEmpty) {
          return 'Document number is required';
        }
        return null;
      },
    );
  }

  Widget _buildIssueDateField() {
    return TextFormField(
      controller: _issueDateController,
      decoration: const InputDecoration(
        labelText: 'Issue Date',
        border: OutlineInputBorder(),
        suffixIcon: Icon(Icons.calendar_today),
      ),
      readOnly: true,
      onTap: () => _selectDate(context, _issueDateController),
    );
  }

  Widget _buildExpiryDateField() {
    return TextFormField(
      controller: _expiryDateController,
      decoration: const InputDecoration(
        labelText: 'Expiry Date *',
        border: OutlineInputBorder(),
        suffixIcon: Icon(Icons.calendar_today),
      ),
      readOnly: true,
      onTap: () => _selectDate(context, _expiryDateController),
      validator: (value) {
        if (value == null || value.trim().isEmpty) {
          return 'Expiry date is required';
        }
        return null;
      },
    );
  }

  Widget _buildNotesField() {
    return TextFormField(
      controller: _notesController,
      decoration: const InputDecoration(
        labelText: 'Notes',
        border: OutlineInputBorder(),
      ),
      maxLines: 3,
    );
  }

  Widget _buildSubmitButton(bool isEdit, bool isRenewal) {
    String buttonText;
    if (isEdit) {
      buttonText = 'Update Document';
    } else if (isRenewal) {
      buttonText = 'Renew Document';
    } else {
      buttonText = 'Add Document';
    }

    return SizedBox(
      width: double.infinity,
      child: ElevatedButton(
        onPressed: _isLoading ? null : () => _submitForm(isEdit, isRenewal),
        style: ElevatedButton.styleFrom(
          backgroundColor: AppColors.primary,
          foregroundColor: AppColors.white,
          padding: const EdgeInsets.symmetric(vertical: 16),
        ),
        child: _isLoading
            ? const CircularProgressIndicator(color: AppColors.white)
            : Text(buttonText),
      ),
    );
  }

  Future<void> _selectDate(BuildContext context, TextEditingController controller) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime(2100),
    );
    
    if (picked != null) {
      setState(() {
        controller.text = picked.toIso8601String().split('T')[0];
      });
    }
  }

  void _submitForm(bool isEdit, bool isRenewal) async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      final documentData = {
        'vehicle': widget.vehicle.id,
        'document_type': _selectedDocumentType!.value,
        'document_number': _documentNumberController.text.trim(),
        'expiry_date': _expiryDateController.text.trim(),
        if (_issueDateController.text.trim().isNotEmpty)
          'issue_date': _issueDateController.text.trim(),
        if (_notesController.text.trim().isNotEmpty)
          'notes': _notesController.text.trim(),
      };

      if (isEdit) {
        await ref.read(vehicleServiceProvider).updateDocument(
          widget.editDocument!.id,
          documentData,
        );
      } else if (isRenewal) {
        await ref.read(vehicleServiceProvider).renewDocument(
          widget.renewDocument!.id,
          documentData,
        );
      } else {
        await ref.read(vehicleServiceProvider).createDocument(documentData);
      }

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Document ${isEdit ? 'updated' : isRenewal ? 'renewed' : 'added'} successfully'),
            backgroundColor: AppColors.success,
          ),
        );
        Navigator.pop(context);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to ${isEdit ? 'update' : isRenewal ? 'renew' : 'add'} document: $e'),
            backgroundColor: AppColors.error,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }
} 